'use client'
import Protected from "@/components/Protected";
import { db } from "@/lib/firebase";
import {
  addDoc, collection, onSnapshot, orderBy, query, updateDoc,
  deleteDoc, doc
} from "firebase/firestore";
import { useEffect, useMemo, useState } from "react";

const CLASS_OPTIONS = ["1A","1B","2A","2B"]; // ajusta a tus clases

// Normalizador para búsquedas y claves
function norm(s){ return (s || "").trim().toLowerCase(); }

// Parser muy simple de emails separados por coma/espacio/nueva línea
function parseEmails(text){
  return (text||"")
    .split(/[\s,;]+/g)
    .map(e => e.trim())
    .filter(e => e && /^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(e));
}

export default function FamiliasPanel() {
  return (
    <Protected>
      <FamiliasInner />
    </Protected>
  );
}

function FamiliasInner() {
  const [families, setFamilies] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [studentName, setStudentName] = useState("");
  const [classGroup, setClassGroup] = useState(CLASS_OPTIONS[0] || "");
  const [emailsText, setEmailsText] = useState("");
  const [notify, setNotify] = useState(true);
  const [qtext, setQtext] = useState("");

  useEffect(() => {
    const q = query(collection(db, "families"), orderBy("studentName", "asc"));
    const unsub = onSnapshot(q, snap => {
      setFamilies(snap.docs.map(d => ({ id: d.id, ...d.data() })));
    });
    return () => unsub();
  }, []);

  const filtered = useMemo(() => {
    const qn = norm(qtext);
    if (!qn) return families;
    return families.filter(f =>
      norm(f.studentName).includes(qn) ||
      norm(f.classGroup).includes(qn) ||
      (Array.isArray(f.parentEmails) && f.parentEmails.join(" ").toLowerCase().includes(qn))
    );
  }, [families, qtext]);

  function resetForm() {
    setEditingId(null);
    setStudentName("");
    setClassGroup(CLASS_OPTIONS[0] || "");
    setEmailsText("");
    setNotify(true);
  }

  async function save(e){
    e.preventDefault();
    const parentEmails = parseEmails(emailsText);
    if (!studentName.trim()) return alert("Pon el nombre del alumno");
    if (!classGroup.trim()) return alert("Selecciona la clase");
    if (parentEmails.length === 0) return alert("Añade al menos un email válido");

    const payload = {
      studentName: studentName.trim(),
      classGroup: classGroup.trim(),
      parentEmails,
      notify: !!notify,
      studentKey: norm(studentName),
      classKey: norm(classGroup),
    };

    try {
      if (editingId) {
        await updateDoc(doc(db, "families", editingId), payload);
      } else {
        await addDoc(collection(db, "families"), payload);
      }
      resetForm();
      alert("Guardado");
    } catch (err) {
      console.error(err);
      alert("Error guardando: " + (err?.message || err));
    }
  }

  function startEdit(f){
    setEditingId(f.id);
    setStudentName(f.studentName || "");
    setClassGroup(f.classGroup || (CLASS_OPTIONS[0] || ""));
    setEmailsText((f.parentEmails || []).join(", "));
    setNotify(f.notify !== false);
  }

  async function remove(id){
    if (!confirm("¿Borrar esta familia?")) return;
    try {
      await deleteDoc(doc(db, "families", id));
    } catch (err) {
      console.error(err);
      alert("No se pudo borrar: " + (err?.message || err));
    }
  }

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-semibold">Gestión de familias</h1>

      <div className="grid md:grid-cols-2 gap-6">
        <form onSubmit={save} className="card space-y-3">
          <h2 className="text-lg font-semibold">{editingId ? "Editar familia" : "Nueva familia"}</h2>

          <label className="label">Alumno</label>
          <input className="input" value={studentName} onChange={e=>setStudentName(e.target.value)} placeholder="Nombre y apellidos" required />

          <label className="label">Clase</label>
          <select className="input" value={classGroup} onChange={e=>setClassGroup(e.target.value)}>
            {CLASS_OPTIONS.map(c => <option key={c} value={c}>{c}</option>)}
          </select>

          <label className="label">Emails de responsables (separados por coma o espacios)</label>
          <textarea className="input min-h-[90px]" value={emailsText} onChange={e=>setEmailsText(e.target.value)} placeholder="madre@correo.com, padre@correo.com" />

          <label className="inline-flex items-center gap-2">
            <input type="checkbox" checked={notify} onChange={e=>setNotify(e.target.checked)} />
            Enviar notificaciones por email
          </label>

          <div className="flex gap-2">
            <button className="btn btn-primary" type="submit">{editingId ? "Guardar cambios" : "Añadir"}</button>
            {editingId && <button className="btn" type="button" onClick={resetForm}>Cancelar</button>}
          </div>
          <p className="text-xs text-gray-500">Guardamos también una clave normalizada para que las búsquedas no dependan de mayúsculas/minúsculas.</p>
        </form>

        <div className="space-y-3">
          <div className="card flex items-center gap-3">
            <input className="input" placeholder="Buscar por alumno/clase/email…" value={qtext} onChange={e=>setQtext(e.target.value)} />
          </div>

          {filtered.length === 0 && <div className="card">No hay familias.</div>}

          <div className="space-y-2">
            {filtered.map(f => (
              <div key={f.id} className="card">
                <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
                  <div className="min-w-0">
                    <div className="font-medium">{f.studentName}</div>
                    <div className="text-sm text-gray-600">Clase: {f.classGroup} · Notificar: {f.notify === false ? "No" : "Sí"}</div>
                    <div className="text-sm break-all">{(f.parentEmails || []).join(", ")}</div>
                  </div>
                  <div className="flex gap-2 shrink-0">
                    <button className="btn" onClick={() => startEdit(f)}>Editar</button>
                    <button className="btn" onClick={() => remove(f.id)}>Borrar</button>
                  </div>
                </div>
              </div>
            ))}
          </div>

        </div>
      </div>
    </div>
  );
}
